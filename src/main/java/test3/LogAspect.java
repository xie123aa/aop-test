package test3;/** * @Author: georgexie * @description: TODO * @Date: 2020/7/29 14:14 * @Version 1.0 */import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.aspectj.lang.reflect.MethodSignature;import org.springframework.stereotype.Component;import java.lang.reflect.Method;@Aspect@Componentpublic class LogAspect {    //针对这个注解做切面操作    @Pointcut("@annotation(test3.Action)")    public void annotationPointCut() {    }    @After("annotationPointCut()")    public void after(JoinPoint joinPoint) {        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();        Method method = methodSignature.getMethod();        Action action = method.getAnnotation(Action.class);        //获取这个注解中一开始设置的属性值name，利用反射获取当前方法，当前方法使用的注解，注解中的参数值        System.out.println("注解式拦截 " + action.name());    }}